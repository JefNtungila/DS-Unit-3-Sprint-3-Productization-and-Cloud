# -*- coding: utf-8 -*-
"""Sprint Challenge -Productization-and-Cloud .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MsGkkIgGpAPrxJfFYiMtqWEv_KFt5ghE

#Part 1 - If I could put Flask in a File
"""

pip install flask

pip install Flask Flask-SQLAlchemy requests

"""OpenAQ Air Quality Dashboard with Flask."""
from flask import Flask

APP = Flask(__name__)


@APP.route('/')
def root():
    """Base view."""
    return 'TODO - part 2 and beyond!'

"""#Part 2 - Breathe Easy with OpenAQ"""

pip install py-openaq

import requests
import openaq

api = openaq.OpenAQ()
status, body = api.cities()

status

body

body['meta']

len(body['results'])

body['results'][:2]

api.measurements(city='Los Angeles', parameter='pm25')

a = (str(api.measurements(city='Los Angeles', parameter='pm25')).split(''''utc': ''')[1:])
b = []

for i in a:
  i = i.split('''', 'loc''')[0]
  b.append(i)

b[:5]

c = (str(api.measurements(city='Los Angeles', parameter='pm25')).split('''value': ''')[1:])
d = []
for i in c:
  i = i.split(''', 'unit''')[0]
  d.append(i)

#Getting this list of tuples may be trickier than you think - the API returns dictionaries inside dictionaries! 
# You may want to use the REPL to experiment and iterate until you find working code, and then add it to your application.

e = []

for idx, i in enumerate(b):
  for idy, j in enumerate(d):
    if idx == idy:
      e.append((i,j))

e

"""#Part 3 - That Data Belongs In A Model!"""

from flask_sqlalchemy import SQLAlchemy

APP.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'
DB = SQLAlchemy(APP)


class Record(DB.Model):
    id = DB.Column(DB.Integer, primary_key=True)
    datetime = DB.Column(DB.String(25))
    value = DB.Column(DB.Float, nullable=False)

    def __repr__(self):
        return 'TODO - write a nice representation of Records'


@APP.route('/refresh')
def refresh():
    """Pull fresh data from Open AQ and replace existing data."""
    DB.drop_all()
    DB.create_all()
    # TODO Get data from OpenAQ, make Record objects with it, and add to db
    DB.session.commit()
    return 'Data refreshed!'

#wasn't able to put the list of tuples in e into a model